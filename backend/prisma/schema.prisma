generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id        Int          @id @default(autoincrement())
  title     String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  results   ExamResult[]
  questions Question[]
}

model Question {
  id          Int              @id @default(autoincrement())
  section     String
  question    String
  options     String[]
  correct     Int
  explanation String
  examId      Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    String?
  exam        Exam             @relation(fields: [examId], references: [id])
  answers     QuestionAnswer[]
}

model ExamResult {
  id              Int              @id @default(autoincrement())
  examId          Int
  score           Int
  totalQuestions  Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  examMode        String           @default("practice")
  timeSpent       Int?
  exam            Exam             @relation(fields: [examId], references: [id])
  questionAnswers QuestionAnswer[]
}

model QuestionAnswer {
  id             Int        @id @default(autoincrement())
  examResultId   Int
  questionId     Int
  selectedAnswer String?
  isCorrect      Boolean
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  timeSpent      Int?
  examResult     ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  question       Question   @relation(fields: [questionId], references: [id])
}
