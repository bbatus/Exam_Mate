import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  Divider,
  Tabs,
  Tab,
  CircularProgress,
  useTheme,
  alpha,
} from '@mui/material';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import BarChartIcon from '@mui/icons-material/BarChart';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  RadialLinearScale,
} from 'chart.js';
import { Line, Bar, Radar, Doughnut } from 'react-chartjs-2';
import { FadeIn } from './UIAnimations';
import { useTranslation } from 'react-i18next';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  RadialLinearScale
);

interface StudySession {
  date: string;
  duration: number; // in minutes
  correctAnswers: number;
  totalQuestions: number;
  topics: { [key: string]: number }; // topic: number of questions
}

interface WeekdayStudy {
  day: string;
  avgDuration: number;
  avgScore: number;
}

interface TimeOfDayStudy {
  timeSlot: string;
  avgDuration: number;
  avgScore: number;
}

interface TopicPerformance {
  topic: string;
  correctPercentage: number;
  questionsAttempted: number;
}

interface StudyAnalyticsData {
  totalStudyTime: number; // in minutes
  totalSessions: number;
  averageScore: number;
  studySessions: StudySession[];
  weekdayAnalysis: WeekdayStudy[];
  timeOfDayAnalysis: TimeOfDayStudy[];
  topicPerformance: TopicPerformance[];
}

interface StudyAnalyticsProps {
  userId?: string; // Optional, could be used to fetch specific user data
}

const StudyAnalytics: React.FC<StudyAnalyticsProps> = ({ userId }) => {
  const [analyticsData, setAnalyticsData] = useState<StudyAnalyticsData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<number>(0);
  const theme = useTheme();
  const { t } = useTranslation();

  // Mock data for study analytics - Updated with current dates and diverse topics
  const generateCurrentMockData = (): StudyAnalyticsData => {
    const currentDate = new Date();
    const sessions: StudySession[] = [];
    
    // Generate sessions for the last 30 days
    for (let i = 29; i >= 0; i--) {
      const sessionDate = new Date(currentDate);
      sessionDate.setDate(sessionDate.getDate() - i);
      
      // Skip some days to make it realistic
      if (Math.random() > 0.7) continue;
      
      const topicSets = [
        { 'Cloud Fundamentals': 8, 'Cloud Security': 7, 'Cloud Economics': 5 },
        { 'Kubernetes Basics': 10, 'Container Management': 8, 'Networking': 7 },
        { 'Basic Grammar': 12, 'Vocabulary': 8, 'Speaking': 5 },
        { 'AI Fundamentals': 9, 'Machine Learning': 6, 'Gen AI Applications': 10 },
        { 'AWS Services': 15, 'Cloud Architecture': 10, 'Security': 5 },
        { 'Advanced Grammar': 8, 'Business English': 7, 'Writing Skills': 10 },
        { 'DevOps Practices': 12, 'CI/CD': 8, 'Monitoring': 5 }
      ];
      
      const randomTopics = topicSets[Math.floor(Math.random() * topicSets.length)];
      const totalQuestions = Object.values(randomTopics).reduce((a, b) => a + b, 0);
      const correctAnswers = Math.floor(totalQuestions * (0.6 + Math.random() * 0.3));
      
      sessions.push({
        date: sessionDate.toISOString().split('T')[0],
        duration: 30 + Math.floor(Math.random() * 90), // 30-120 minutes
        correctAnswers,
        totalQuestions,
        topics: randomTopics
      });
    }
    
    const totalTime = sessions.reduce((sum, session) => sum + session.duration, 0);
    const totalCorrect = sessions.reduce((sum, session) => sum + session.correctAnswers, 0);
    const totalQuestions = sessions.reduce((sum, session) => sum + session.totalQuestions, 0);
    
    return {
      totalStudyTime: totalTime,
      totalSessions: sessions.length,
      averageScore: totalQuestions > 0 ? Math.round((totalCorrect / totalQuestions) * 100 * 10) / 10 : 0,
      studySessions: sessions,
      weekdayAnalysis: [
        { day: t('analytics.weekdays.monday'), avgDuration: 75, avgScore: 70 },
        { day: t('analytics.weekdays.tuesday'), avgDuration: 90, avgScore: 75 },
        { day: t('analytics.weekdays.wednesday'), avgDuration: 60, avgScore: 68 },
        { day: t('analytics.weekdays.thursday'), avgDuration: 105, avgScore: 80 },
        { day: t('analytics.weekdays.friday'), avgDuration: 45, avgScore: 65 },
        { day: t('analytics.weekdays.saturday'), avgDuration: 120, avgScore: 85 },
        { day: t('analytics.weekdays.sunday'), avgDuration: 110, avgScore: 78 }
      ],
      timeOfDayAnalysis: [
        { timeSlot: t('analytics.morning'), avgDuration: 45, avgScore: 82 },
        { timeSlot: t('analytics.afternoon'), avgDuration: 60, avgScore: 75 },
        { timeSlot: t('analytics.evening'), avgDuration: 90, avgScore: 70 },
        { timeSlot: t('analytics.night'), avgDuration: 120, avgScore: 65 }
      ],
      topicPerformance: [
        { topic: 'Cloud Fundamentals', correctPercentage: 85, questionsAttempted: 120 },
        { topic: 'Cloud Security', correctPercentage: 70, questionsAttempted: 100 },
        { topic: 'Kubernetes Basics', correctPercentage: 78, questionsAttempted: 90 },
        { topic: 'Basic Grammar', correctPercentage: 82, questionsAttempted: 85 },
        { topic: 'AI Fundamentals', correctPercentage: 75, questionsAttempted: 70 },
        { topic: 'AWS Services', correctPercentage: 68, questionsAttempted: 95 }
      ]
    };
  };
  
  const mockAnalyticsData = generateCurrentMockData();
      {
        date: '2023-07-14',
        duration: 60,
        correctAnswers: 25,
        totalQuestions: 30,
        topics: { 'Cloud Products': 10, 'Cloud Migration': 10, 'Cloud Innovation': 10 }
      },
      {
        date: '2023-07-16',
        duration: 70,
        correctAnswers: 28,
        totalQuestions: 35,
        topics: { 'Fundamentals of gen AI': 15, 'Google Cloud\'s gen AI offerings': 20 }
      },
      {
        date: '2023-07-18',
        duration: 90,
        correctAnswers: 38,
        totalQuestions: 50,
        topics: { 'Fundamentals of gen AI': 20, 'Google Cloud\'s gen AI offerings': 15, 'Techniques to improve gen AI model output': 15 }
      },
      {
        date: '2023-07-20',
        duration: 60,
        correctAnswers: 26,
        totalQuestions: 35,
        topics: { 'Google Cloud\'s gen AI offerings': 15, 'Techniques to improve gen AI model output': 10, 'Business strategies for gen AI solutions': 10 }
      }
    ],
    weekdayAnalysis: [
      { day: 'Pazartesi', avgDuration: 75, avgScore: 70 },
      { day: 'Salı', avgDuration: 90, avgScore: 75 },
      { day: 'Çarşamba', avgDuration: 60, avgScore: 68 },
      { day: 'Perşembe', avgDuration: 105, avgScore: 80 },
      { day: 'Cuma', avgDuration: 45, avgScore: 65 },
      { day: 'Cumartesi', avgDuration: 120, avgScore: 85 },
      { day: 'Pazar', avgDuration: 110, avgScore: 78 }
    ],
    timeOfDayAnalysis: [
      { timeSlot: 'Sabah (6-12)', avgDuration: 45, avgScore: 82 },
      { timeSlot: 'Öğlen (12-17)', avgDuration: 60, avgScore: 75 },
      { timeSlot: 'Akşam (17-22)', avgDuration: 90, avgScore: 70 },
      { timeSlot: 'Gece (22-6)', avgDuration: 120, avgScore: 65 }
    ],
    topicPerformance: [
      { topic: 'Cloud Fundamentals', correctPercentage: 85, questionsAttempted: 120 },
      { topic: 'Cloud Security', correctPercentage: 70, questionsAttempted: 100 },
      { topic: 'Cloud Economics', correctPercentage: 65, questionsAttempted: 80 },
      { topic: 'Cloud Products', correctPercentage: 60, questionsAttempted: 90 },
      { topic: 'Cloud Migration', correctPercentage: 55, questionsAttempted: 60 },
      { topic: 'Cloud Innovation', correctPercentage: 50, questionsAttempted: 40 },
      { topic: 'Fundamentals of gen AI', correctPercentage: 78, questionsAttempted: 35 },
      { topic: 'Google Cloud\'s gen AI offerings', correctPercentage: 72, questionsAttempted: 50 },
      { topic: 'Techniques to improve gen AI model output', correctPercentage: 65, questionsAttempted: 25 },
      { topic: 'Business strategies for gen AI solutions', correctPercentage: 60, questionsAttempted: 10 }
    ]
  };

  useEffect(() => {
    const fetchAnalyticsData = async () => {
      try {
        setLoading(true);
        
        // Simulate API call with timeout
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Use mock data for now
        setAnalyticsData(mockAnalyticsData);
      } catch (error) {
        console.error('Error fetching analytics data:', error);
        setError('Analitik verileri yüklenirken bir hata oluştu.');
      } finally {
        setLoading(false);
      }
    };

    fetchAnalyticsData();
  }, [userId]);

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  // Format minutes to hours and minutes
  const formatTime = (minutes: number): string => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}s ${mins}dk`;
  };

  // Prepare data for progress over time chart
  const prepareProgressData = () => {
    if (!analyticsData) return null;

    const dates = analyticsData.studySessions.map(session => {
      const date = new Date(session.date);
      return date.toLocaleDateString('tr-TR', { day: '2-digit', month: 'short' });
    });

    const scores = analyticsData.studySessions.map(session => 
      (session.correctAnswers / session.totalQuestions) * 100
    );

    const durations = analyticsData.studySessions.map(session => session.duration);

    return {
      labels: dates,
      datasets: [
        {
          label: t('analytics.accuracyRate'),
          data: scores,
          borderColor: theme.palette.primary.main,
          backgroundColor: alpha(theme.palette.primary.main, 0.5),
          yAxisID: 'y',
        },
        {
          label: t('analytics.studyTime'),
          data: durations,
          borderColor: theme.palette.secondary.main,
          backgroundColor: alpha(theme.palette.secondary.main, 0.5),
          yAxisID: 'y1',
        }
      ]
    };
  };

  // Prepare data for weekday analysis chart
  const prepareWeekdayData = () => {
    if (!analyticsData) return null;

    return {
      labels: analyticsData.weekdayAnalysis.map(item => item.day),
      datasets: [
        {
          label: t('analytics.studyTime'),
          data: analyticsData.weekdayAnalysis.map(item => item.avgDuration),
          backgroundColor: alpha(theme.palette.primary.main, 0.7),
        },
        {
          label: t('analytics.averageScore'),
          data: analyticsData.weekdayAnalysis.map(item => item.avgScore),
          backgroundColor: alpha(theme.palette.secondary.main, 0.7),
        }
      ]
    };
  };

  // Prepare data for time of day analysis chart
  const prepareTimeOfDayData = () => {
    if (!analyticsData) return null;

    return {
      labels: analyticsData.timeOfDayAnalysis.map(item => item.timeSlot),
      datasets: [
        {
          label: t('analytics.studyTime'),
          data: analyticsData.timeOfDayAnalysis.map(item => item.avgDuration),
          backgroundColor: [
            alpha(theme.palette.info.main, 0.7),
            alpha(theme.palette.success.main, 0.7),
            alpha(theme.palette.warning.main, 0.7),
            alpha(theme.palette.error.main, 0.7)
          ],
          borderWidth: 1,
        }
      ]
    };
  };

  // Prepare data for topic performance radar chart
  const prepareTopicPerformanceData = () => {
    if (!analyticsData) return null;

    return {
      labels: analyticsData.topicPerformance.map(item => item.topic),
      datasets: [
        {
          label: t('analytics.accuracyRate'),
          data: analyticsData.topicPerformance.map(item => item.correctPercentage),
          backgroundColor: alpha(theme.palette.primary.main, 0.2),
          borderColor: theme.palette.primary.main,
          pointBackgroundColor: theme.palette.primary.main,
          pointBorderColor: '#fff',
          pointHoverBackgroundColor: '#fff',
          pointHoverBorderColor: theme.palette.primary.main,
        }
      ]
    };
  };

  // Prepare data for topic distribution doughnut chart
  const prepareTopicDistributionData = () => {
    if (!analyticsData) return null;

    return {
      labels: analyticsData.topicPerformance.map(item => item.topic),
      datasets: [
        {
          data: analyticsData.topicPerformance.map(item => item.questionsAttempted),
          backgroundColor: [
            alpha(theme.palette.primary.main, 0.7),
            alpha(theme.palette.secondary.main, 0.7),
            alpha(theme.palette.success.main, 0.7),
            alpha(theme.palette.warning.main, 0.7),
            alpha(theme.palette.error.main, 0.7),
            alpha(theme.palette.info.main, 0.7)
          ],
          borderWidth: 1,
        }
      ]
    };
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error || !analyticsData) {
    return (
      <Box sx={{ p: 3, bgcolor: alpha(theme.palette.error.main, 0.1), borderRadius: 2 }}>
        <Typography color="error">{error || t('common.error')}</Typography>
      </Box>
    );
  }

  return (
    <FadeIn>
      <Paper 
        elevation={0} 
        sx={{ 
          p: 3, 
          borderRadius: 2, 
          border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
          bgcolor: alpha(theme.palette.background.paper, 0.7),
          overflow: 'hidden'
        }}
      >
        <Typography variant="h6" fontWeight="bold" gutterBottom>
          {t('analytics.studyHabits')}
        </Typography>

        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <Card elevation={1} sx={{ borderRadius: 2, height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <AccessTimeIcon color="primary" sx={{ mr: 1 }} />
                  <Typography variant="subtitle2" color="text.secondary">
                    {t('analytics.totalStudyTime')}
                  </Typography>
                </Box>
                <Typography variant="h5" fontWeight="bold">
                  {formatTime(analyticsData.totalStudyTime)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {analyticsData.totalSessions} {t('analytics.sessions')}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card elevation={1} sx={{ borderRadius: 2, height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <TrendingUpIcon color="secondary" sx={{ mr: 1 }} />
                  <Typography variant="subtitle2" color="text.secondary">
                    {t('analytics.averageScore')}
                  </Typography>
                </Box>
                <Typography variant="h5" fontWeight="bold">
                  %{analyticsData.averageScore.toFixed(1)}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {t('analytics.allSessions')}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card elevation={1} sx={{ borderRadius: 2, height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <BarChartIcon color="success" sx={{ mr: 1 }} />
                  <Typography variant="subtitle2" color="text.secondary">
                    {t('analytics.strongestTopic')}
                  </Typography>
                </Box>
                <Typography variant="h5" fontWeight="bold">
                  {analyticsData.topicPerformance.sort((a, b) => b.correctPercentage - a.correctPercentage)[0].topic}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  %{analyticsData.topicPerformance.sort((a, b) => b.correctPercentage - a.correctPercentage)[0].correctPercentage} {t('analytics.accuracy')}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card elevation={1} sx={{ borderRadius: 2, height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <CalendarMonthIcon color="warning" sx={{ mr: 1 }} />
                  <Typography variant="subtitle2" color="text.secondary">
                    {t('analytics.mostProductiveDay')}
                  </Typography>
                </Box>
                <Typography variant="h5" fontWeight="bold">
                  {analyticsData.weekdayAnalysis.sort((a, b) => b.avgScore - a.avgScore)[0].day}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  %{analyticsData.weekdayAnalysis.sort((a, b) => b.avgScore - a.avgScore)[0].avgScore} {t('analytics.averageScoreDay')}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
        
        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
          <Tabs value={activeTab} onChange={handleTabChange} aria-label="analytics tabs">
            <Tab label={t('analytics.tabs.progress')} id="tab-0" aria-controls="tabpanel-0" />
            <Tab label={t('analytics.tabs.timeAnalysis')} id="tab-1" aria-controls="tabpanel-1" />
            <Tab label={t('analytics.tabs.topicPerformance')} id="tab-2" aria-controls="tabpanel-2" />
          </Tabs>
        </Box>
        
        {/* Progress Over Time Tab */}
        {activeTab === 0 && (
          <Box role="tabpanel" id="tabpanel-0" aria-labelledby="tab-0">
            <Typography variant="h6" gutterBottom>
              {t('analytics.progressOverTime')}
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              {t('analytics.progressDescription')}
            </Typography>
            <Box sx={{ height: 400, mb: 4 }}>
              <Line 
                data={prepareProgressData() as any}
                options={{
                  responsive: true,
                  interaction: {
                    mode: 'index' as const,
                    intersect: false,
                  },
                  scales: {
                    y: {
                      type: 'linear' as const,
                      display: true,
                      position: 'left' as const,
                      title: {
                        display: true,
                        text: t('analytics.accuracyRate')
                      },
                      min: 0,
                      max: 100,
                    },
                    y1: {
                      type: 'linear' as const,
                      display: true,
                      position: 'right' as const,
                      title: {
                        display: true,
                        text: t('analytics.studyTime')
                      },
                      grid: {
                        drawOnChartArea: false,
                      },
                    },
                  },
                }}
              />
            </Box>
            
            <Divider sx={{ my: 3 }} />
            
            <Typography variant="h6" gutterBottom>
              {t('analytics.suggestions')}
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Card elevation={0} sx={{ bgcolor: alpha(theme.palette.info.main, 0.1), borderRadius: 2 }}>
                  <CardContent>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                      {t('analytics.studyDuration')}
                    </Typography>
                    <Typography variant="body2">
                      {t('analytics.studyDurationTip')}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card elevation={0} sx={{ bgcolor: alpha(theme.palette.success.main, 0.1), borderRadius: 2 }}>
                  <CardContent>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                      {t('analytics.regularity')}
                    </Typography>
                    <Typography variant="body2">
                      {t('analytics.regularityTip')}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card elevation={0} sx={{ bgcolor: alpha(theme.palette.warning.main, 0.1), borderRadius: 2 }}>
                  <CardContent>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                      {t('analytics.topicDistribution')}
                    </Typography>
                    <Typography variant="body2">
                      {t('analytics.topicDistributionTip')}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Box>
        )}
        
        {/* Time Analysis Tab */}
        {activeTab === 1 && (
          <Box role="tabpanel" id="tabpanel-1" aria-labelledby="tab-1">
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <Typography variant="h6" gutterBottom>
                  {t('analytics.weekdayAnalysis')}
                </Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  {t('analytics.weekdayDescription')}
                </Typography>
                <Box sx={{ height: 350 }}>
                  <Bar 
                    data={prepareWeekdayData() as any}
                    options={{
                      responsive: true,
                      scales: {
                        y: {
                          beginAtZero: true,
                          title: {
                            display: true,
                            text: t('analytics.studyTime')
                          }
                        }
                      }
                    }}
                  />
                </Box>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="h6" gutterBottom>
                  {t('analytics.timeOfDayAnalysis')}
                </Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  {t('analytics.timeOfDayDescription')}
                </Typography>
                <Box sx={{ height: 350 }}>
                  <Bar 
                    data={prepareTimeOfDayData() as any}
                    options={{
                      responsive: true,
                      scales: {
                        y: {
                          beginAtZero: true,
                          title: {
                            display: true,
                            text: t('analytics.studyTime')
                          }
                        }
                      }
                    }}
                  />
                </Box>
              </Grid>
            </Grid>
          </Box>
        )}
        
        {/* Topic Performance Tab */}
        {activeTab === 2 && (
          <Box role="tabpanel" id="tabpanel-2" aria-labelledby="tab-2">
            <Grid container spacing={4}>
              <Grid item xs={12} md={6}>
                <Typography variant="h6" gutterBottom>
                  {t('analytics.topicAnalysis')}
                </Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  {t('analytics.topicAnalysisDescription')}
                </Typography>
                <Box sx={{ height: 350 }}>
                  <Radar 
                    data={prepareTopicPerformanceData() as any}
                    options={{
                      responsive: true,
                      scales: {
                        r: {
                          min: 0,
                          max: 100,
                          ticks: {
                            stepSize: 20
                          }
                        }
                      }
                    }}
                  />
                </Box>
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="h6" gutterBottom>
                  {t('analytics.topicDistributionTitle')}
                </Typography>
                <Typography variant="body2" color="text.secondary" paragraph>
                  {t('analytics.topicDistributionDescription')}
                </Typography>
                <Box sx={{ height: 350 }}>
                  <Doughnut 
                    data={prepareTopicDistributionData() as any}
                    options={{
                      responsive: true,
                      plugins: {
                        legend: {
                          position: 'right' as const,
                        }
                      }
                    }}
                  />
                </Box>
              </Grid>
            </Grid>
            
            <Divider sx={{ my: 3 }} />
            
            <Typography variant="h6" gutterBottom>
              {t('analytics.recommendations')}
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              {t('analytics.recommendationsDescription')}
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Card elevation={0} sx={{ bgcolor: alpha(theme.palette.warning.main, 0.1), borderRadius: 2 }}>
                  <CardContent>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                      {t('analytics.focusTopics')}
                    </Typography>
                    <Typography variant="body2">
                      {t('analytics.focusTopicsTip')}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card elevation={0} sx={{ bgcolor: alpha(theme.palette.info.main, 0.1), borderRadius: 2 }}>
                  <CardContent>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                      {t('analytics.reviewRegularly')}
                    </Typography>
                    <Typography variant="body2">
                      {t('analytics.reviewRegularlyTip')}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card elevation={0} sx={{ bgcolor: alpha(theme.palette.success.main, 0.1), borderRadius: 2 }}>
                  <CardContent>
                    <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
                      {t('analytics.balanceStudy')}
                    </Typography>
                    <Typography variant="body2">
                      {t('analytics.balanceStudyTip')}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Box>
        )}
      </Paper>
    </FadeIn>
  );
};

export default StudyAnalytics; 